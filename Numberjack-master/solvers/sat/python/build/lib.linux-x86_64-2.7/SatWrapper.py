# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SatWrapper', [dirname(__file__)])
        except ImportError:
            import _SatWrapper
            return _SatWrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_SatWrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SatWrapper = swig_import_helper()
    del swig_import_helper
else:
    import _SatWrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class EncodingConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodingConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EncodingConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["direct"] = _SatWrapper.EncodingConfiguration_direct_set
    __swig_getmethods__["direct"] = _SatWrapper.EncodingConfiguration_direct_get
    if _newclass:direct = _swig_property(_SatWrapper.EncodingConfiguration_direct_get, _SatWrapper.EncodingConfiguration_direct_set)
    __swig_setmethods__["order"] = _SatWrapper.EncodingConfiguration_order_set
    __swig_getmethods__["order"] = _SatWrapper.EncodingConfiguration_order_get
    if _newclass:order = _swig_property(_SatWrapper.EncodingConfiguration_order_get, _SatWrapper.EncodingConfiguration_order_set)
    __swig_setmethods__["conflict"] = _SatWrapper.EncodingConfiguration_conflict_set
    __swig_getmethods__["conflict"] = _SatWrapper.EncodingConfiguration_conflict_get
    if _newclass:conflict = _swig_property(_SatWrapper.EncodingConfiguration_conflict_get, _SatWrapper.EncodingConfiguration_conflict_set)
    __swig_setmethods__["support"] = _SatWrapper.EncodingConfiguration_support_set
    __swig_getmethods__["support"] = _SatWrapper.EncodingConfiguration_support_get
    if _newclass:support = _swig_property(_SatWrapper.EncodingConfiguration_support_get, _SatWrapper.EncodingConfiguration_support_set)
    Pairwise = _SatWrapper.EncodingConfiguration_Pairwise
    Ladder = _SatWrapper.EncodingConfiguration_Ladder
    __swig_setmethods__["amo_encoding"] = _SatWrapper.EncodingConfiguration_amo_encoding_set
    __swig_getmethods__["amo_encoding"] = _SatWrapper.EncodingConfiguration_amo_encoding_get
    if _newclass:amo_encoding = _swig_property(_SatWrapper.EncodingConfiguration_amo_encoding_get, _SatWrapper.EncodingConfiguration_amo_encoding_set)
    PairwiseDecomp = _SatWrapper.EncodingConfiguration_PairwiseDecomp
    LadderAMO = _SatWrapper.EncodingConfiguration_LadderAMO
    PigeonHole = _SatWrapper.EncodingConfiguration_PigeonHole
    __swig_setmethods__["alldiff_encoding"] = _SatWrapper.EncodingConfiguration_alldiff_encoding_set
    __swig_getmethods__["alldiff_encoding"] = _SatWrapper.EncodingConfiguration_alldiff_encoding_get
    if _newclass:alldiff_encoding = _swig_property(_SatWrapper.EncodingConfiguration_alldiff_encoding_get, _SatWrapper.EncodingConfiguration_alldiff_encoding_set)
    def display(self, *args): return _SatWrapper.EncodingConfiguration_display(self, *args)
    def __init__(self, *args): 
        this = _SatWrapper.new_EncodingConfiguration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_EncodingConfiguration
    __del__ = lambda self : None;
EncodingConfiguration_swigregister = _SatWrapper.EncodingConfiguration_swigregister
EncodingConfiguration_swigregister(EncodingConfiguration)
cvar = _SatWrapper.cvar
UNSAT = cvar.UNSAT
SAT = cvar.SAT
UNKNOWN = cvar.UNKNOWN
LUBY = cvar.LUBY
GEOMETRIC = cvar.GEOMETRIC
GLUBY = cvar.GLUBY
SELF = cvar.SELF
DIRECT = cvar.DIRECT
ORDER = cvar.ORDER

class AbstractDomain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractDomain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractDomain, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["owner"] = _SatWrapper.AbstractDomain_owner_set
    __swig_getmethods__["owner"] = _SatWrapper.AbstractDomain_owner_get
    if _newclass:owner = _swig_property(_SatWrapper.AbstractDomain_owner_get, _SatWrapper.AbstractDomain_owner_set)
    def getval(self, *args): return _SatWrapper.AbstractDomain_getval(self, *args)
    def getmin(self): return _SatWrapper.AbstractDomain_getmin(self)
    def getmax(self): return _SatWrapper.AbstractDomain_getmax(self)
    def getsize(self): return _SatWrapper.AbstractDomain_getsize(self)
    def contain(self, *args): return _SatWrapper.AbstractDomain_contain(self, *args)
    def next(self, *args): return _SatWrapper.AbstractDomain_next(self, *args)
    def encode(self, *args): return _SatWrapper.AbstractDomain_encode(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.AbstractDomain_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.AbstractDomain_equal(self, *args)
    def print_lit(self, *args): return _SatWrapper.AbstractDomain_print_lit(self, *args)
    def display(self, *args): return _SatWrapper.AbstractDomain_display(self, *args)
    __swig_destroy__ = _SatWrapper.delete_AbstractDomain
    __del__ = lambda self : None;
AbstractDomain_swigregister = _SatWrapper.AbstractDomain_swigregister
AbstractDomain_swigregister(AbstractDomain)

class OffsetDomain(AbstractDomain):
    __swig_setmethods__ = {}
    for _s in [AbstractDomain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffsetDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDomain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffsetDomain, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_dom_ptr"] = _SatWrapper.OffsetDomain__dom_ptr_set
    __swig_getmethods__["_dom_ptr"] = _SatWrapper.OffsetDomain__dom_ptr_get
    if _newclass:_dom_ptr = _swig_property(_SatWrapper.OffsetDomain__dom_ptr_get, _SatWrapper.OffsetDomain__dom_ptr_set)
    __swig_setmethods__["offset"] = _SatWrapper.OffsetDomain_offset_set
    __swig_getmethods__["offset"] = _SatWrapper.OffsetDomain_offset_get
    if _newclass:offset = _swig_property(_SatWrapper.OffsetDomain_offset_get, _SatWrapper.OffsetDomain_offset_set)
    def __init__(self, *args): 
        this = _SatWrapper.new_OffsetDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def getval(self, *args): return _SatWrapper.OffsetDomain_getval(self, *args)
    def getmin(self): return _SatWrapper.OffsetDomain_getmin(self)
    def getmax(self): return _SatWrapper.OffsetDomain_getmax(self)
    def getsize(self): return _SatWrapper.OffsetDomain_getsize(self)
    def contain(self, *args): return _SatWrapper.OffsetDomain_contain(self, *args)
    def next(self, *args): return _SatWrapper.OffsetDomain_next(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.OffsetDomain_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.OffsetDomain_equal(self, *args)
    def display(self, *args): return _SatWrapper.OffsetDomain_display(self, *args)
    __swig_destroy__ = _SatWrapper.delete_OffsetDomain
    __del__ = lambda self : None;
OffsetDomain_swigregister = _SatWrapper.OffsetDomain_swigregister
OffsetDomain_swigregister(OffsetDomain)

class FactorDomain(AbstractDomain):
    __swig_setmethods__ = {}
    for _s in [AbstractDomain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FactorDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDomain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FactorDomain, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_dom_ptr"] = _SatWrapper.FactorDomain__dom_ptr_set
    __swig_getmethods__["_dom_ptr"] = _SatWrapper.FactorDomain__dom_ptr_get
    if _newclass:_dom_ptr = _swig_property(_SatWrapper.FactorDomain__dom_ptr_get, _SatWrapper.FactorDomain__dom_ptr_set)
    __swig_setmethods__["factor"] = _SatWrapper.FactorDomain_factor_set
    __swig_getmethods__["factor"] = _SatWrapper.FactorDomain_factor_get
    if _newclass:factor = _swig_property(_SatWrapper.FactorDomain_factor_get, _SatWrapper.FactorDomain_factor_set)
    def __init__(self, *args): 
        this = _SatWrapper.new_FactorDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def getval(self, *args): return _SatWrapper.FactorDomain_getval(self, *args)
    def getmin(self): return _SatWrapper.FactorDomain_getmin(self)
    def getmax(self): return _SatWrapper.FactorDomain_getmax(self)
    def getsize(self): return _SatWrapper.FactorDomain_getsize(self)
    def contain(self, *args): return _SatWrapper.FactorDomain_contain(self, *args)
    def next(self, *args): return _SatWrapper.FactorDomain_next(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.FactorDomain_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.FactorDomain_equal(self, *args)
    def display(self, *args): return _SatWrapper.FactorDomain_display(self, *args)
    __swig_destroy__ = _SatWrapper.delete_FactorDomain
    __del__ = lambda self : None;
FactorDomain_swigregister = _SatWrapper.FactorDomain_swigregister
FactorDomain_swigregister(FactorDomain)

class EqDomain(AbstractDomain):
    __swig_setmethods__ = {}
    for _s in [AbstractDomain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDomain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqDomain, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_dom_ptr"] = _SatWrapper.EqDomain__dom_ptr_set
    __swig_getmethods__["_dom_ptr"] = _SatWrapper.EqDomain__dom_ptr_get
    if _newclass:_dom_ptr = _swig_property(_SatWrapper.EqDomain__dom_ptr_get, _SatWrapper.EqDomain__dom_ptr_set)
    __swig_setmethods__["value"] = _SatWrapper.EqDomain_value_set
    __swig_getmethods__["value"] = _SatWrapper.EqDomain_value_get
    if _newclass:value = _swig_property(_SatWrapper.EqDomain_value_get, _SatWrapper.EqDomain_value_set)
    __swig_setmethods__["spin"] = _SatWrapper.EqDomain_spin_set
    __swig_getmethods__["spin"] = _SatWrapper.EqDomain_spin_get
    if _newclass:spin = _swig_property(_SatWrapper.EqDomain_spin_get, _SatWrapper.EqDomain_spin_set)
    def __init__(self, *args): 
        this = _SatWrapper.new_EqDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def getval(self, *args): return _SatWrapper.EqDomain_getval(self, *args)
    def getmin(self): return _SatWrapper.EqDomain_getmin(self)
    def getmax(self): return _SatWrapper.EqDomain_getmax(self)
    def getsize(self): return _SatWrapper.EqDomain_getsize(self)
    def contain(self, *args): return _SatWrapper.EqDomain_contain(self, *args)
    def next(self, *args): return _SatWrapper.EqDomain_next(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.EqDomain_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.EqDomain_equal(self, *args)
    def display(self, *args): return _SatWrapper.EqDomain_display(self, *args)
    __swig_destroy__ = _SatWrapper.delete_EqDomain
    __del__ = lambda self : None;
EqDomain_swigregister = _SatWrapper.EqDomain_swigregister
EqDomain_swigregister(EqDomain)

class LeqDomain(AbstractDomain):
    __swig_setmethods__ = {}
    for _s in [AbstractDomain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LeqDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDomain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LeqDomain, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_dom_ptr"] = _SatWrapper.LeqDomain__dom_ptr_set
    __swig_getmethods__["_dom_ptr"] = _SatWrapper.LeqDomain__dom_ptr_get
    if _newclass:_dom_ptr = _swig_property(_SatWrapper.LeqDomain__dom_ptr_get, _SatWrapper.LeqDomain__dom_ptr_set)
    __swig_setmethods__["bound"] = _SatWrapper.LeqDomain_bound_set
    __swig_getmethods__["bound"] = _SatWrapper.LeqDomain_bound_get
    if _newclass:bound = _swig_property(_SatWrapper.LeqDomain_bound_get, _SatWrapper.LeqDomain_bound_set)
    __swig_setmethods__["spin"] = _SatWrapper.LeqDomain_spin_set
    __swig_getmethods__["spin"] = _SatWrapper.LeqDomain_spin_get
    if _newclass:spin = _swig_property(_SatWrapper.LeqDomain_spin_get, _SatWrapper.LeqDomain_spin_set)
    def __init__(self, *args): 
        this = _SatWrapper.new_LeqDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def getval(self, *args): return _SatWrapper.LeqDomain_getval(self, *args)
    def getmin(self): return _SatWrapper.LeqDomain_getmin(self)
    def getmax(self): return _SatWrapper.LeqDomain_getmax(self)
    def getsize(self): return _SatWrapper.LeqDomain_getsize(self)
    def contain(self, *args): return _SatWrapper.LeqDomain_contain(self, *args)
    def next(self, *args): return _SatWrapper.LeqDomain_next(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.LeqDomain_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.LeqDomain_equal(self, *args)
    def display(self, *args): return _SatWrapper.LeqDomain_display(self, *args)
    __swig_destroy__ = _SatWrapper.delete_LeqDomain
    __del__ = lambda self : None;
LeqDomain_swigregister = _SatWrapper.LeqDomain_swigregister
LeqDomain_swigregister(LeqDomain)

class ConstantDomain(AbstractDomain):
    __swig_setmethods__ = {}
    for _s in [AbstractDomain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDomain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantDomain, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _SatWrapper.ConstantDomain_value_set
    __swig_getmethods__["value"] = _SatWrapper.ConstantDomain_value_get
    if _newclass:value = _swig_property(_SatWrapper.ConstantDomain_value_get, _SatWrapper.ConstantDomain_value_set)
    def __init__(self, *args): 
        this = _SatWrapper.new_ConstantDomain(*args)
        try: self.this.append(this)
        except: self.this = this
    def getval(self, *args): return _SatWrapper.ConstantDomain_getval(self, *args)
    def getmin(self): return _SatWrapper.ConstantDomain_getmin(self)
    def getmax(self): return _SatWrapper.ConstantDomain_getmax(self)
    def getsize(self): return _SatWrapper.ConstantDomain_getsize(self)
    def contain(self, *args): return _SatWrapper.ConstantDomain_contain(self, *args)
    def next(self, *args): return _SatWrapper.ConstantDomain_next(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.ConstantDomain_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.ConstantDomain_equal(self, *args)
    def display(self, *args): return _SatWrapper.ConstantDomain_display(self, *args)
    __swig_destroy__ = _SatWrapper.delete_ConstantDomain
    __del__ = lambda self : None;
ConstantDomain_swigregister = _SatWrapper.ConstantDomain_swigregister
ConstantDomain_swigregister(ConstantDomain)

class DomainEncoding(AbstractDomain):
    __swig_setmethods__ = {}
    for _s in [AbstractDomain]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainEncoding, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractDomain]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainEncoding, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_DomainEncoding(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_DomainEncoding
    __del__ = lambda self : None;
    def print_lit(self, *args): return _SatWrapper.DomainEncoding_print_lit(self, *args)
    def getval(self, *args): return _SatWrapper.DomainEncoding_getval(self, *args)
    def getmin(self): return _SatWrapper.DomainEncoding_getmin(self)
    def getmax(self): return _SatWrapper.DomainEncoding_getmax(self)
    def getsize(self): return _SatWrapper.DomainEncoding_getsize(self)
    def contain(self, *args): return _SatWrapper.DomainEncoding_contain(self, *args)
    def next(self, *args): return _SatWrapper.DomainEncoding_next(self, *args)
    def encode(self, *args): return _SatWrapper.DomainEncoding_encode(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.DomainEncoding_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.DomainEncoding_equal(self, *args)
    def display(self, *args): return _SatWrapper.DomainEncoding_display(self, *args)
DomainEncoding_swigregister = _SatWrapper.DomainEncoding_swigregister
DomainEncoding_swigregister(DomainEncoding)

class SatWrapper_Expression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_Expression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_Expression, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_solver"] = _SatWrapper.SatWrapper_Expression__solver_set
    __swig_getmethods__["_solver"] = _SatWrapper.SatWrapper_Expression__solver_get
    if _newclass:_solver = _swig_property(_SatWrapper.SatWrapper_Expression__solver_get, _SatWrapper.SatWrapper_Expression__solver_set)
    __swig_setmethods__["encoding"] = _SatWrapper.SatWrapper_Expression_encoding_set
    __swig_getmethods__["encoding"] = _SatWrapper.SatWrapper_Expression_encoding_get
    if _newclass:encoding = _swig_property(_SatWrapper.SatWrapper_Expression_encoding_get, _SatWrapper.SatWrapper_Expression_encoding_set)
    __swig_setmethods__["_ident"] = _SatWrapper.SatWrapper_Expression__ident_set
    __swig_getmethods__["_ident"] = _SatWrapper.SatWrapper_Expression__ident_get
    if _newclass:_ident = _swig_property(_SatWrapper.SatWrapper_Expression__ident_get, _SatWrapper.SatWrapper_Expression__ident_set)
    __swig_setmethods__["nbj_ident"] = _SatWrapper.SatWrapper_Expression_nbj_ident_set
    __swig_getmethods__["nbj_ident"] = _SatWrapper.SatWrapper_Expression_nbj_ident_get
    if _newclass:nbj_ident = _swig_property(_SatWrapper.SatWrapper_Expression_nbj_ident_get, _SatWrapper.SatWrapper_Expression_nbj_ident_set)
    __swig_setmethods__["domain"] = _SatWrapper.SatWrapper_Expression_domain_set
    __swig_getmethods__["domain"] = _SatWrapper.SatWrapper_Expression_domain_get
    if _newclass:domain = _swig_property(_SatWrapper.SatWrapper_Expression_domain_get, _SatWrapper.SatWrapper_Expression_domain_set)
    def has_been_added(self): return _SatWrapper.SatWrapper_Expression_has_been_added(self)
    def getval(self, *args): return _SatWrapper.SatWrapper_Expression_getval(self, *args)
    def getmin(self): return _SatWrapper.SatWrapper_Expression_getmin(self)
    def getmax(self): return _SatWrapper.SatWrapper_Expression_getmax(self)
    def getsize(self): return _SatWrapper.SatWrapper_Expression_getsize(self)
    def get_value(self): return _SatWrapper.SatWrapper_Expression_get_value(self)
    def get_min(self): return _SatWrapper.SatWrapper_Expression_get_min(self)
    def get_max(self): return _SatWrapper.SatWrapper_Expression_get_max(self)
    def get_size(self): return _SatWrapper.SatWrapper_Expression_get_size(self)
    def next(self, *args): return _SatWrapper.SatWrapper_Expression_next(self, *args)
    def contain(self, *args): return _SatWrapper.SatWrapper_Expression_contain(self, *args)
    def greater_than(self, *args): return _SatWrapper.SatWrapper_Expression_greater_than(self, *args)
    def less_or_equal(self, *args): return _SatWrapper.SatWrapper_Expression_less_or_equal(self, *args)
    def equal(self, *args): return _SatWrapper.SatWrapper_Expression_equal(self, *args)
    def initialise(self): return _SatWrapper.SatWrapper_Expression_initialise(self)
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_Expression(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_Expression
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_Expression_add(self, *args)
SatWrapper_Expression_swigregister = _SatWrapper.SatWrapper_Expression_swigregister
SatWrapper_Expression_swigregister(SatWrapper_Expression)

class SatWrapper_IntVar(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_IntVar, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_IntVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_IntVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_IntVar
    __del__ = lambda self : None;
SatWrapper_IntVar_swigregister = _SatWrapper.SatWrapper_IntVar_swigregister
SatWrapper_IntVar_swigregister(SatWrapper_IntVar)

class SatWrapper_ConstantInt(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_ConstantInt, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_ConstantInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_ConstantInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_ConstantInt
    __del__ = lambda self : None;
SatWrapper_ConstantInt_swigregister = _SatWrapper.SatWrapper_ConstantInt_swigregister
SatWrapper_ConstantInt_swigregister(SatWrapper_ConstantInt)

class SatWrapper_AllDiff(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_AllDiff, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_AllDiff, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_AllDiff(*args)
        try: self.this.append(this)
        except: self.this = this
    def addVar(self, *args): return _SatWrapper.SatWrapper_AllDiff_addVar(self, *args)
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_AllDiff
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_AllDiff_add(self, *args)
SatWrapper_AllDiff_swigregister = _SatWrapper.SatWrapper_AllDiff_swigregister
SatWrapper_AllDiff_swigregister(SatWrapper_AllDiff)

class SatWrapper_Sum(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_Sum, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_Sum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_Sum(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialise(self): return _SatWrapper.SatWrapper_Sum_initialise(self)
    def addVar(self, *args): return _SatWrapper.SatWrapper_Sum_addVar(self, *args)
    def addWeight(self, *args): return _SatWrapper.SatWrapper_Sum_addWeight(self, *args)
    def set_rhs(self, *args): return _SatWrapper.SatWrapper_Sum_set_rhs(self, *args)
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_Sum
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_Sum_add(self, *args)
SatWrapper_Sum_swigregister = _SatWrapper.SatWrapper_Sum_swigregister
SatWrapper_Sum_swigregister(SatWrapper_Sum)

class SatWrapper_binop(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_binop, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_binop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def arity(self): return _SatWrapper.SatWrapper_binop_arity(self)
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_binop
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_binop_add(self, *args)
SatWrapper_binop_swigregister = _SatWrapper.SatWrapper_binop_swigregister
SatWrapper_binop_swigregister(SatWrapper_binop)

class SatWrapper_add(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_add, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_add, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_add(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_add
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_add_add(self, *args)
SatWrapper_add_swigregister = _SatWrapper.SatWrapper_add_swigregister
SatWrapper_add_swigregister(SatWrapper_add)

class SatWrapper_mul(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_mul, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_mul, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_mul(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_mul
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_mul_add(self, *args)
SatWrapper_mul_swigregister = _SatWrapper.SatWrapper_mul_swigregister
SatWrapper_mul_swigregister(SatWrapper_mul)

class SatWrapper_mod(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_mod, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_mod, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_mod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_mod
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_mod_add(self, *args)
SatWrapper_mod_swigregister = _SatWrapper.SatWrapper_mod_swigregister
SatWrapper_mod_swigregister(SatWrapper_mod)

class SatWrapper_Abs(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_Abs, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_Abs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_Abs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_Abs
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_Abs_add(self, *args)
SatWrapper_Abs_swigregister = _SatWrapper.SatWrapper_Abs_swigregister
SatWrapper_Abs_swigregister(SatWrapper_Abs)

class SatWrapper_or(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_or, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_or, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_or(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_or
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_or_add(self, *args)
SatWrapper_or_swigregister = _SatWrapper.SatWrapper_or_swigregister
SatWrapper_or_swigregister(SatWrapper_or)

class SatWrapper_and(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_and, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_and, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_and(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_and
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_and_add(self, *args)
SatWrapper_and_swigregister = _SatWrapper.SatWrapper_and_swigregister
SatWrapper_and_swigregister(SatWrapper_and)


def processClause(*args):
  return _SatWrapper.processClause(*args)
processClause = _SatWrapper.processClause
class SatWrapper_eq(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_eq, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_eq, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_eq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_eq
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_eq_add(self, *args)
SatWrapper_eq_swigregister = _SatWrapper.SatWrapper_eq_swigregister
SatWrapper_eq_swigregister(SatWrapper_eq)

class SatWrapper_ne(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_ne, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_ne, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_ne(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_ne
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_ne_add(self, *args)
SatWrapper_ne_swigregister = _SatWrapper.SatWrapper_ne_swigregister
SatWrapper_ne_swigregister(SatWrapper_ne)

class SatWrapper_le(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_le, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_le, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_le(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_le
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_le_add(self, *args)
SatWrapper_le_swigregister = _SatWrapper.SatWrapper_le_swigregister
SatWrapper_le_swigregister(SatWrapper_le)

class SatWrapper_ge(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_ge, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_ge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_ge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_ge
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_ge_add(self, *args)
SatWrapper_ge_swigregister = _SatWrapper.SatWrapper_ge_swigregister
SatWrapper_ge_swigregister(SatWrapper_ge)

class SatWrapper_lt(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_lt, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_lt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_lt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_lt
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_lt_add(self, *args)
SatWrapper_lt_swigregister = _SatWrapper.SatWrapper_lt_swigregister
SatWrapper_lt_swigregister(SatWrapper_lt)

class SatWrapper_gt(SatWrapper_binop):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_gt, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_gt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_gt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_gt
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_gt_add(self, *args)
SatWrapper_gt_swigregister = _SatWrapper.SatWrapper_gt_swigregister
SatWrapper_gt_swigregister(SatWrapper_gt)

class SatWrapper_Minimise(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_Minimise, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_Minimise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_Minimise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_Minimise
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_Minimise_add(self, *args)
SatWrapper_Minimise_swigregister = _SatWrapper.SatWrapper_Minimise_swigregister
SatWrapper_Minimise_swigregister(SatWrapper_Minimise)

class SatWrapper_Maximise(SatWrapper_Expression):
    __swig_setmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapper_Maximise, name, value)
    __swig_getmethods__ = {}
    for _s in [SatWrapper_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapper_Maximise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SatWrapper.new_SatWrapper_Maximise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapper_Maximise
    __del__ = lambda self : None;
    def add(self, *args): return _SatWrapper.SatWrapper_Maximise_add(self, *args)
SatWrapper_Maximise_swigregister = _SatWrapper.SatWrapper_Maximise_swigregister
SatWrapper_Maximise_swigregister(SatWrapper_Maximise)

class SatWrapperSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapperSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapperSolver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minimise_obj"] = _SatWrapper.SatWrapperSolver_minimise_obj_set
    __swig_getmethods__["minimise_obj"] = _SatWrapper.SatWrapperSolver_minimise_obj_get
    if _newclass:minimise_obj = _swig_property(_SatWrapper.SatWrapperSolver_minimise_obj_get, _SatWrapper.SatWrapperSolver_minimise_obj_set)
    __swig_setmethods__["maximise_obj"] = _SatWrapper.SatWrapperSolver_maximise_obj_set
    __swig_getmethods__["maximise_obj"] = _SatWrapper.SatWrapperSolver_maximise_obj_get
    if _newclass:maximise_obj = _swig_property(_SatWrapper.SatWrapperSolver_maximise_obj_get, _SatWrapper.SatWrapperSolver_maximise_obj_set)
    __swig_setmethods__["encoding"] = _SatWrapper.SatWrapperSolver_encoding_set
    __swig_getmethods__["encoding"] = _SatWrapper.SatWrapperSolver_encoding_get
    if _newclass:encoding = _swig_property(_SatWrapper.SatWrapperSolver_encoding_get, _SatWrapper.SatWrapperSolver_encoding_set)
    __swig_setmethods__["_expressions"] = _SatWrapper.SatWrapperSolver__expressions_set
    __swig_getmethods__["_expressions"] = _SatWrapper.SatWrapperSolver__expressions_get
    if _newclass:_expressions = _swig_property(_SatWrapper.SatWrapperSolver__expressions_get, _SatWrapper.SatWrapperSolver__expressions_set)
    __swig_setmethods__["_variables"] = _SatWrapper.SatWrapperSolver__variables_set
    __swig_getmethods__["_variables"] = _SatWrapper.SatWrapperSolver__variables_get
    if _newclass:_variables = _swig_property(_SatWrapper.SatWrapperSolver__variables_get, _SatWrapper.SatWrapperSolver__variables_set)
    __swig_setmethods__["_atom_to_domain"] = _SatWrapper.SatWrapperSolver__atom_to_domain_set
    __swig_getmethods__["_atom_to_domain"] = _SatWrapper.SatWrapperSolver__atom_to_domain_get
    if _newclass:_atom_to_domain = _swig_property(_SatWrapper.SatWrapperSolver__atom_to_domain_get, _SatWrapper.SatWrapperSolver__atom_to_domain_set)
    __swig_setmethods__["_atom_to_type"] = _SatWrapper.SatWrapperSolver__atom_to_type_set
    __swig_getmethods__["_atom_to_type"] = _SatWrapper.SatWrapperSolver__atom_to_type_get
    if _newclass:_atom_to_type = _swig_property(_SatWrapper.SatWrapperSolver__atom_to_type_get, _SatWrapper.SatWrapperSolver__atom_to_type_set)
    __swig_setmethods__["clause_base"] = _SatWrapper.SatWrapperSolver_clause_base_set
    __swig_getmethods__["clause_base"] = _SatWrapper.SatWrapperSolver_clause_base_get
    if _newclass:clause_base = _swig_property(_SatWrapper.SatWrapperSolver_clause_base_get, _SatWrapper.SatWrapperSolver_clause_base_set)
    __swig_setmethods__["current"] = _SatWrapper.SatWrapperSolver_current_set
    __swig_getmethods__["current"] = _SatWrapper.SatWrapperSolver_current_get
    if _newclass:current = _swig_property(_SatWrapper.SatWrapperSolver_current_get, _SatWrapper.SatWrapperSolver_current_set)
    __swig_setmethods__["clause_limit"] = _SatWrapper.SatWrapperSolver_clause_limit_set
    __swig_getmethods__["clause_limit"] = _SatWrapper.SatWrapperSolver_clause_limit_get
    if _newclass:clause_limit = _swig_property(_SatWrapper.SatWrapperSolver_clause_limit_get, _SatWrapper.SatWrapperSolver_clause_limit_set)
    __swig_setmethods__["cp_model"] = _SatWrapper.SatWrapperSolver_cp_model_set
    __swig_getmethods__["cp_model"] = _SatWrapper.SatWrapperSolver_cp_model_get
    if _newclass:cp_model = _swig_property(_SatWrapper.SatWrapperSolver_cp_model_get, _SatWrapper.SatWrapperSolver_cp_model_set)
    def __init__(self): 
        this = _SatWrapper.new_SatWrapperSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapperSolver
    __del__ = lambda self : None;
    def get_cb_size(self): return _SatWrapper.SatWrapperSolver_get_cb_size(self)
    def add(self, *args): return _SatWrapper.SatWrapperSolver_add(self, *args)
    def declare(self, *args): return _SatWrapper.SatWrapperSolver_declare(self, *args)
    def create_atom(self, *args): return _SatWrapper.SatWrapperSolver_create_atom(self, *args)
    def addClause(self, *args): return _SatWrapper.SatWrapperSolver_addClause(self, *args)
    def validate(self): return _SatWrapper.SatWrapperSolver_validate(self)
    def displayClause(self, *args): return _SatWrapper.SatWrapperSolver_displayClause(self, *args)
    def displayLiteral(self, *args): return _SatWrapper.SatWrapperSolver_displayLiteral(self, *args)
    def output_cnf(self, *args): return _SatWrapper.SatWrapperSolver_output_cnf(self, *args)
    def truth_value(self, *args): return _SatWrapper.SatWrapperSolver_truth_value(self, *args)
    def initialise(self, *args): return _SatWrapper.SatWrapperSolver_initialise(self, *args)
    def solve(self): return _SatWrapper.SatWrapperSolver_solve(self)
    def solveAndRestart(self, *args): return _SatWrapper.SatWrapperSolver_solveAndRestart(self, *args)
    def startNewSearch(self): return _SatWrapper.SatWrapperSolver_startNewSearch(self)
    def getNextSolution(self): return _SatWrapper.SatWrapperSolver_getNextSolution(self)
    def sacPreprocess(self, *args): return _SatWrapper.SatWrapperSolver_sacPreprocess(self, *args)
    def reset(self, *args): return _SatWrapper.SatWrapperSolver_reset(self, *args)
    def propagate(self): return _SatWrapper.SatWrapperSolver_propagate(self)
    def save(self): return _SatWrapper.SatWrapperSolver_save(self)
    def post(self, *args): return _SatWrapper.SatWrapperSolver_post(self, *args)
    def undo(self, *args): return _SatWrapper.SatWrapperSolver_undo(self, *args)
    def deduce(self): return _SatWrapper.SatWrapperSolver_deduce(self)
    def branch_right(self): return _SatWrapper.SatWrapperSolver_branch_right(self)
    def store_solution(self): return _SatWrapper.SatWrapperSolver_store_solution(self)
    def setClauseLimit(self, *args): return _SatWrapper.SatWrapperSolver_setClauseLimit(self, *args)
    def guide(self, *args): return _SatWrapper.SatWrapperSolver_guide(self, *args)
    def setHeuristic(self, *args): return _SatWrapper.SatWrapperSolver_setHeuristic(self, *args)
    def setFailureLimit(self, *args): return _SatWrapper.SatWrapperSolver_setFailureLimit(self, *args)
    def setNodeLimit(self, *args): return _SatWrapper.SatWrapperSolver_setNodeLimit(self, *args)
    def setTimeLimit(self, *args): return _SatWrapper.SatWrapperSolver_setTimeLimit(self, *args)
    def setVerbosity(self, *args): return _SatWrapper.SatWrapperSolver_setVerbosity(self, *args)
    def setRandomized(self, *args): return _SatWrapper.SatWrapperSolver_setRandomized(self, *args)
    def setRandomSeed(self, *args): return _SatWrapper.SatWrapperSolver_setRandomSeed(self, *args)
    def is_sat(self): return _SatWrapper.SatWrapperSolver_is_sat(self)
    def is_opt(self): return _SatWrapper.SatWrapperSolver_is_opt(self)
    def is_unsat(self): return _SatWrapper.SatWrapperSolver_is_unsat(self)
    def printStatistics(self): return _SatWrapper.SatWrapperSolver_printStatistics(self)
    def getBacktracks(self): return _SatWrapper.SatWrapperSolver_getBacktracks(self)
    def getNodes(self): return _SatWrapper.SatWrapperSolver_getNodes(self)
    def getFailures(self): return _SatWrapper.SatWrapperSolver_getFailures(self)
    def getChecks(self): return _SatWrapper.SatWrapperSolver_getChecks(self)
    def getPropags(self): return _SatWrapper.SatWrapperSolver_getPropags(self)
    def getTime(self): return _SatWrapper.SatWrapperSolver_getTime(self)
SatWrapperSolver_swigregister = _SatWrapper.SatWrapperSolver_swigregister
SatWrapperSolver_swigregister(SatWrapperSolver)

class SatWrapperExpArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapperExpArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapperExpArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SatWrapper.new_SatWrapperExpArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapperExpArray
    __del__ = lambda self : None;
    def size(self): return _SatWrapper.SatWrapperExpArray_size(self)
    def add(self, *args): return _SatWrapper.SatWrapperExpArray_add(self, *args)
    def get_item(self, *args): return _SatWrapper.SatWrapperExpArray_get_item(self, *args)
    def set_item(self, *args): return _SatWrapper.SatWrapperExpArray_set_item(self, *args)
SatWrapperExpArray_swigregister = _SatWrapper.SatWrapperExpArray_swigregister
SatWrapperExpArray_swigregister(SatWrapperExpArray)

class SatWrapperIntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapperIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapperIntArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SatWrapper.new_SatWrapperIntArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapperIntArray
    __del__ = lambda self : None;
    def size(self): return _SatWrapper.SatWrapperIntArray_size(self)
    def add(self, *args): return _SatWrapper.SatWrapperIntArray_add(self, *args)
    def get_item(self, *args): return _SatWrapper.SatWrapperIntArray_get_item(self, *args)
    def set_item(self, *args): return _SatWrapper.SatWrapperIntArray_set_item(self, *args)
SatWrapperIntArray_swigregister = _SatWrapper.SatWrapperIntArray_swigregister
SatWrapperIntArray_swigregister(SatWrapperIntArray)

class SatWrapperDoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatWrapperDoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatWrapperDoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SatWrapper.new_SatWrapperDoubleArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SatWrapper.delete_SatWrapperDoubleArray
    __del__ = lambda self : None;
    def size(self): return _SatWrapper.SatWrapperDoubleArray_size(self)
    def add(self, *args): return _SatWrapper.SatWrapperDoubleArray_add(self, *args)
    def get_item(self, *args): return _SatWrapper.SatWrapperDoubleArray_get_item(self, *args)
    def set_item(self, *args): return _SatWrapper.SatWrapperDoubleArray_set_item(self, *args)
SatWrapperDoubleArray_swigregister = _SatWrapper.SatWrapperDoubleArray_swigregister
SatWrapperDoubleArray_swigregister(SatWrapperDoubleArray)

# This file is compatible with both classic and new-style classes.




import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "SatWrapper", "SatWrapper", model, X, FD, clause_limit, encoding)
